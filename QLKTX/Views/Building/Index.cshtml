@using System.Globalization
@model QLKTX.Models.PageInfoViewModel;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = Model.FunctionName != null ? Model.FunctionName.ToString() : "Danh sách dự án";
}
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-3">
                            <div class="form-group">
                                <label>Tìm kiếm:</label>
                                <input type="text" id="txtSearch" class="form-control form-control-sm" autocomplete="off">
                            </div>
                        </div>
                    </div>
                </div>
                <!-- /.card-body -->
                <div class="card-footer clearfix text-center">
                    <button type="button" class="btn btn-sm btn-primary" onclick="onSearchPaging()" @(Model.FUPermiss.FView ? "" : "disabled")><i class="fa fa-search"></i> Tìm kiếm</button>
                    <button type="button" class="btn btn-sm btn-success" data-toggle="modal" onclick="javascript: openCreateNew(event)" @(Model.FUPermiss.FAdd ? "" : "disabled")><i class="fas fa-plus"></i> Thêm mới</button>
                </div>
            </div>
            <!-- /.card -->
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <div class="card card-info">
                <div class="card-header">
                    <h3 class="card-title">DS dự án</h3>
                </div>
                <!-- /.card-header -->
                <div class="card-body">
                    <table id="tblBuilding" class="table table-bordered table-hover projects">
                        <thead>
                            <tr>
                                <th>STT</th>
                                <th>Mã dự án</th>
                                <th>Tên dự án</th>
                                <th>Mô tả</th>
                                <th>Địa chỉ</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                        <tfoot>
                        </tfoot>
                    </table>
                </div>
                <!-- /.card-body -->
            </div>
            <!-- /.card -->
        </div>
    </div>
</div>

@*<div id="buildingModal" class="easyui-dialog" title="Thêm/Cập nhật" style="width:80%;height:200px;max-width:1000px;padding:10px" data-options="
            iconCls:'icon-save',
            onResize:function(){
                $(this).dialog('center');
            }">
    <div class="row">
                    <table id="dgBuildingSection" class="table-body easyui-datagrid table-data" title="DS khu vực" style="height: 500px;"></table>
                </div>
</div>*@

<div class="modal fade" id="buildingModal">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header bg-info">
                <h5 class="modal-title">Thêm/Cập nhật</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label for="inputName">Mã dự án</label>
                            <input type="text" id="txtBuildingCode" class="form-control form-control-sm entry_required" autocomplete="off" />
                            <input type="hidden" id="txtBuildingKey" class="form-control form-control-sm" autocomplete="off" readonly />
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label for="inputName">Tên dự án</label>
                            <input type="text" id="txtBuildingName" class="form-control form-control-sm entry_required" autocomplete="off" />
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label for="inputName">Cơ cấu tổ chức</label>
                            <div class="">
                                <input type="text" id="cboCompanyStructure" class="easyui-combotree" autocomplete="off" data-options="animate:true, prompt:''" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label for="inputName">Mô tả thêm</label>
                            <input type="text" id="txtDescription" class="form-control form-control-sm" autocomplete="off" />
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label for="inputName">Mã số thuế</label>
                            <input type="text" id="txtTaxNumber" class="form-control form-control-sm" autocomplete="off" />
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label for="inputName">Tên công ty</label>
                            <input type="text" id="txtCompanyName" class="form-control form-control-sm" autocomplete="off" />
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label for="inputName">Địa chỉ</label>
                            <input type="text" id="txtAddress" class="form-control form-control-sm" autocomplete="off" />
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group form-check m-t35" style="padding-left: 1.5rem;">
                            <input type="checkbox" class="form-check-input" id="cbActive">
                            <label class="form-check-label" for="cbActive">Sử dụng</label>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <table id="dgBuildingSection" class="easyui-datagrid table-data" title="DS khu vực" style="height: 400px;"></table>
                </div>
            </div>
            <div class="modal-footer justify-content-center align-items-center">
                @*<button type="button" class="btn btn-default" data-dismiss="modal">Đóng</button>*@
                <div id="divCreate" class="form-group">
                    <button type="button" id="btnCreate" class="btn btn-primary" onclick="onCreate(event)" @(Model.FUPermiss.FAdd ? "" : "disabled")>Lưu</button>
                </div>
                <div id="divUpdate" class="form-group" style="display:none;">
                    <button type="button" id="btnUpdate" class="btn btn-primary" onclick="onUpdate(event)" @(Model.FUPermiss.FEdit ? "" : "disabled")>Lưu</button>
                </div>
                <div id="divDelete" class="form-group" style="display:none;">
                    <button type="button" id="btnDelete" class="btn btn-danger" onclick="onDeleteEntry(event)" @(Model.FUPermiss.FDel ? "" : "disabled")>Xóa</button>
                </div>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>
<!-- /.modal -->
@section scripts {
    <script type="text/javascript">
        var requiredList = document.getElementsByClassName("entry_required");
        var editIndex = undefined;
        var FunctionID = "@Model.FunctionID";
        var buildSearchModel = {
            SearchParams: null
        };
        var objCombo = {
            cboCompanyStructureData: []
        };
        var objDataEntry = {
            objBuilding: {},
            arrBuildingSections: []
        };
        $(document).ready(async function () {
            $.ajaxSettings.async = false;
            initCombo();
            onSearchPaging();
            $.ajaxSettings.async = true;
        });

        function initCombo() {
            $.ajaxSettings.async = false;
            objCombo.cboCompanyStructureData = getDataComboTree(ProjectCF.configs.baseApi + "/Common/combotree/company-structure");
            initComboTree(objCombo.cboCompanyStructureData, "cboCompanyStructure", false, 300);
            BindingDataToGrid([]);
            $.ajaxSettings.async = true;
        }

        function onSearchPaging() {
            buildSearchModel.SearchParams = $("[id=txtSearch]").val().trim();
            BindingDataTable();
        }

        function BindingDataTable() {
            $("#tblBuilding").DataTable().destroy();
            $("#tblBuilding tbody").empty(); // empty tbody
            $("#tblBuilding").DataTable({
                bAutoWidth: false,
                ordering: true,
                info: true,
                bFilter: false,
                processing: false,
                serverSide: true,
                lengthMenu: [[10, 25, 50, 100], [10, 25, 50, 100]],
                pageLength: ProjectCF.configs.pageSize,
                ajax: {
                    type: "GET",
                    url: "/Building/SearchPaging",
                    headers: { 'FunctionID': FunctionID },
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    data: function (data) {
                        ajaxindicatorstart(VNMessageR.COMMON_00011);

                        var dataSearch = {};
                        dataSearch.Draw = data.draw;
                        dataSearch.PageIndex = data.start;
                        dataSearch.PageSize = data.length;
                        var colIndex = data.order[0].column;
                        var colName = GetSortColumnNameFromIndex(colIndex, data.columns);
                        dataSearch.SortItem = colName;
                        dataSearch.SortDirection = data.order[0].dir;

                        dataSearch.SearchParams = buildSearchModel.SearchParams;
                        dataSearch.FunctionID = FunctionID;

                        return dataSearch;
                    },
                    dataSrc: function (json) {
                        ajaxindicatorstop();
                        return json.data;
                    },
                    error: function (err) {
                        ajaxindicatorstop();
                    }
                },
                "columns": [
                    {
                        "data": "STT", "sortable": false,
                        "className": "text-center",
                        "width": 60,
                        "render": function (data, type, row, meta) {
                            return meta.row + meta.settings._iDisplayStart + 1;
                        }
                    },
                    { "data": "BuildingCode", "sortable": true },
                    { "data": "BuildingName", "sortable": true },
                    { "data": "Description", "sortable": false },
                    { "data": "Address", "sortable": false },
                    {
                        "className": "text-center project-actions text-right",
                        "sortable": false,
                        "width": 100,
                        "render": function (data, type, full, meta) {
                            var actionStr = "";
                            if (full.BuildingKey) {
                                actionStr = `<button class="btn btn-info btn-xs" onclick = "openEdit(event, '${full.BuildingKey}')"> <i class="fas fa-pencil-alt"> </i> Sửa </button>&nbsp;`;
                                actionStr += `<button class="btn btn-danger btn-xs" onclick = "onDelete(event, '${full.BuildingKey}')" @(Model.FUPermiss.FDel ? "" : "disabled")> <i class="fas fa-trash" @(Model.FUPermiss.FDel ? "" : "disabled")> </i> Xóa </button>&nbsp;`;
                            }
                            return actionStr;
                        }
                    }
                ],
                "aaSorting": [[1, "desc"]],
                "columnDefs": [
                    {
                        'targets': [0], /* column index */
                        'orderable': false /* true or false */
                    }
                ],
                select: {
                    style: "multi"
                }
            });
        }

        function onGetByID(buildingKey) {
            if (buildingKey > 0) {
                //var objParams = {
                //    buildingKey
                //};
                ajaxindicatorstart(VNMessageR.COMMON_00011);
                $.ajax({
                    type: 'GET',
                    url: "/Building/GetById/" + buildingKey,
                    headers: { 'FunctionID': FunctionID },
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    //data: objParams,
                    success: function (result) {
                        if (result.Success) {
                            bindingDataToForm(result.Data);
                        }
                        ajaxindicatorstop();
                    }, error: function (err) {
                        ToastrException(err);
                        ajaxindicatorstop();
                    }
                });
            } else {
                BindingDataToGrid([]);
            }
        }

        function bindingDataToForm(data) {
            if (data == null) {
                BindingDataToGrid([]);
            }
            else {
                objDataEntry.objBuilding = data.Building;
                objDataEntry.arrBuildingSections = data.BuildingSections;
                setFormData(objDataEntry.objBuilding);
                setTimeout(() => {
                    if (objDataEntry.arrBuildingSections != null && objDataEntry.arrBuildingSections.length > 0)
                        BindingDataToGrid(objDataEntry.arrBuildingSections);
                    else
                        BindingDataToGrid([]);
                }, 500);
            }
        }

        function onCreate(e) {
            e.preventDefault();
            let isValidForm = ValidateControlForm(requiredList);
            if (!isValidForm) {
                toastr.warning(VNMessageR.COMMON_00001);
                return false;
            }

            $.messager.confirm(VNMessageR.COMMON_00010,
                VNMessageR.COMMON_00007,
                function (r) {
                    if (r) {
                        let objSave = {
                            Building: getDataMaster(),
                            BuildingSections: getDataDetail()
                        };
                        CallAjaxSave("Create", objSave);
                    }
                });
            return false;
        }

        function onUpdate(e) {
            e.preventDefault();
            let isValidForm = ValidateControlForm(requiredList);
            if (!isValidForm) {
                toastr.warning(VNMessageR.COMMON_00001);
                return false;
            }

            $.messager.confirm(VNMessageR.COMMON_00010,
                VNMessageR.COMMON_00007,
                function (r) {
                    if (r) {
                        let objSave = {
                            Building: getDataMaster(),
                            BuildingSections: getDataDetail()
                        };
                        CallAjaxSave("Update", objSave);
                    }
                });
            return false;
        }

        function onDelete(e, id) {
            e.preventDefault();
            if (id) {
                $.messager.confirm(VNMessageR.COMMON_00010,
                    VNMessageR.COMMON_00014,
                    function (r) {
                        if (r) {
                            CallAjaxDelete(id);
                        }
                    });
                return false;
            } else {
                toastr.warning(VNMessageR.COMMON_00013);
            }
        }

        function onDeleteEntry(e) {
            e.preventDefault();
            var id = $('[id$=txtBuildingKey]').val();
            if (id) {
                $.messager.confirm(VNMessageR.COMMON_00010,
                    VNMessageR.COMMON_00014,
                    function (r) {
                        if (r) {
                            CallAjaxDelete(id);
                        }
                    });
                return false;
            } else {
                toastr.warning(VNMessageR.COMMON_00013);
            }
        }

        function getDataMaster() {
            let objMData = {};
            objMData.BuildingKey = $('[id$=txtBuildingKey]').val() ? getInt($('[id$=txtBuildingKey]').val()) : null;
            objMData.BuildingCode = $('[id$=txtBuildingCode]').val();
            objMData.BuildingName = $('[id$=txtBuildingName]').val();
            objMData.Description = $('[id$=txtDescription]').val();
            objMData.TaxNumber = $('[id$=txtTaxNumber]').val();
            objMData.CompanyName = $('[id$=txtCompanyName]').val();
            objMData.Address = $('[id$=txtAddress]').val();
            objMData.Active = $("[id=cbActive]").prop('checked');
            objMData.CompanyStructureKey = $('[id$=cboCompanyStructure').combotree('getValue') ? getInt($('[id$=cboCompanyStructure').combotree('getValue')) : null;
            return objMData;
        }

        function getDataDetail() {
            //Detail
            let objDData = [];
            $("[id=dgBuildingSection]").datagrid("acceptChanges");
            let detailData = $("[id=dgBuildingSection]").datagrid("getData").rows;
            if (detailData.length > 0) {
                detailData.forEach(function addDetail(item, index) {
                    let data = {};
                    data.BuildingSectionKey = item.BuildingSectionKey ? getInt(item.BuildingSectionKey) : null;
                    data.BuildingKey = item.BuildingKey ? getInt(item.BuildingKey) : null;
                    data.BuildingSectionCode = item.BuildingSectionCode;
                    data.BuildingSectionName = item.BuildingSectionName;
                    data.Description = item.Description;
                    data.Active = item.Active == 1 ? true : false;
                    objDData.push(data);
                });
            }

            return objDData;
        }

        //====================  Tabs Detail  =====================//
        function BindingDataToGrid(data) {
            let toolbar = [
                {
                    text: "Thêm",
                    id: "btnAddDetailGrid",
                    iconCls: "icon-add",
                    handler: addnewrow
                },
                {
                    text: "Xóa",
                    id: "btnDelDetailGrid",
                    iconCls: "icon-remove",
                    handler: removeit
                },
                {
                    text: "Lưu tạm",
                    id: "btnSaveTempDetailGrid",
                    iconCls: "icon-save",
                    handler: acceptit
                },
                {
                    text: "Quay lại",
                    id: "btnUndoDetailGrid",
                    iconCls: "icon-undo",
                    handler: rejectit
                }
            ];
            editIndex = undefined;

            $("[id=dgBuildingSection]").datagrid("options").pageNumber = 1;
            $("[id=dgBuildingSection]").datagrid({ data: [] });
            $("[id=dgBuildingSection]").datagrid({
                height: 400,
                width: "100%",
                rownumbers: true,
                toolbar: toolbar,
                autoRowHeight: true,
                striped: false,
                iconCls: "icon-list",
                singleSelect: true,
                selectOnCheck: false,
                checkOnSelect: false,
                singleCheck: false,
                pagination: false,
                //loadFilter: pagerFilter,
                //sortName: "JobSequence",
                //sortOrder: "asc",
                data: data,
                columns: [
                    [
                        { field: "BuildingSectionKey", width: 0, hidden: true },
                        { field: "BuildingKey", width: 0, hidden: true },
                        {
                            field: "BuildingSectionCode",
                            title: "Mã khu vực",
                            hidden: false,
                            width: 200,
                            editor: {
                                type: 'textbox', options: { required: true, readonly: false, validType:'ascii_code_only' }
                            }
                        },
                        {
                            field: "BuildingSectionName",
                            title: "Tên khu vực",
                            hidden: false,
                            width: 200,
                            editor: {
                                type: "textbox", options: { required: true, readonly: false }
                            }
                        },
                        {
                            field: "Description",
                            title: "Mô tả",
                            width: 200,
                            editor: {
                                type: "textbox", options: { required: false, readonly: false }
                            }
                        },
                        {
                            field: 'Active',
                            title: "Trạng thái",
                            width: '15%',
                            align: 'center',
                            formatter: function (value, row) {
                                if (value == 1 || value == true) {
                                    row.ActiveName = 'Sử dụng';
                                } else {
                                    row.ActiveName = 'Không sử dụng';
                                }
                                return row.ActiveName;
                            },
                            editor: { type: 'checkbox', options: { on: 1, off: 0 } }
                        }
                    ]
                ],
                onClickCell: function (index, field, value) {
                    if (endEditing()) {
                        $("[id=dgBuildingSection]").datagrid("selectRow", index).datagrid("beginEdit", index);
                        var ed = $("[id=dgBuildingSection]").datagrid("getEditor", { index: index, field: field });
                        if (ed) {
                            ($(ed.target).data("textbox") ? $(ed.target).textbox("textbox") : $(ed.target)).focus();
                        }
                        editIndex = index;
                    } else {
                        setTimeout(function () {
                            $("[id=dgBuildingSection]").datagrid("selectRow", editIndex);
                        },
                            0);
                    }
                },
                onBeginEdit: function (rowIndex, row) {
                    editIndex = rowIndex;
                },
                onEndEdit: function (index, row) {
                    var active = getInt(row.Active);
                    row.ActiveName = active == 1 ? "Sử dụng" : "Không sử dụng";
                },
                onAfterEdit: function (index, row) {
                    //row.editing = true;
                    $(this).datagrid("refreshRow", index);
                },
                onCancelEdit: function (index, row) {
                    row.editing = false;
                    $(this).datagrid("refreshRow", index);
                },
                onLoadSuccess: function (data) {
                },
                onSelect: function (index, row) {
                },
                onUnselect: function (index, row) {
                }
            });
        }

        function endEditing() {
            if (editIndex == undefined) {
                return true;
            }
            if ($("[id=dgBuildingSection]").datagrid("validateRow", editIndex)) {
                $("[id=dgBuildingSection]").datagrid("endEdit", editIndex);
                editIndex = undefined;
                return true;
            } else {
                toastr.warning(VNMessageR.COMMON_00001);
                return false;
            }
        }

        function acceptit() {
            if (endEditing()) {
                editIndex = undefined;
            }
        }

        function removeit() {
            if (editIndex !== undefined) {
                let rowSelected = $("[id=dgBuildingSection]").datagrid("getRows")[editIndex];
                if (rowSelected.BuildingSectionKey > 0) {
                    $.messager.confirm(VNMessageR.COMMON_00010,
                        VNMessageR.COMMON_00014,
                        function (r) {
                            if (r) {
                                CallAjaxDeleteDetail(rowSelected.BuildingSectionKey);
                            }
                        });
                    return false;
                } else {
                    toastr.warning(VNMessageR.COMMON_00013);
                    $("[id=dgBuildingSection]").datagrid('cancelEdit', editIndex).datagrid('deleteRow', editIndex);
                    editIndex = undefined;
                }
            }
            return false;
        }

        function rejectit() {
            $("[id=dgBuildingSection]").datagrid("rejectChanges");
            editIndex = undefined;
        }

        function addnewrow() {
            let isValidForm = ValidateControlForm(requiredList);
            if (!isValidForm) {
                toastr.remove();
                toastr.warning(VNMessageR.COMMON_00001);
                return false;
            }

            if (endEditing()) {
                let count = $("[id=dgBuildingSection]").datagrid("getRows").length;
                for (let i = 0; i < count; i++) {
                    $("[id=dgBuildingSection]").datagrid("refreshRow", i).datagrid("collapseRow", i);
                }

                $("[id=dgBuildingSection]").datagrid("appendRow",
                    {
                        BuildingSectionKey: 0,
                        BuildingKey: $('[id$=txtBuildingKey]').val() || 0,
                        isAddNewRow: true,
                    });
                editIndex = $("[id=dgBuildingSection]").datagrid("getRows").length - 1;
                $("[id=dgBuildingSection]").datagrid("selectRow", editIndex).datagrid("beginEdit", editIndex);

            }
            return false;
        }

        function resetFormData() {
            $("[id=divCreate]").css("display", "");
            $("[id=divUpdate]").css("display", "none");
            $("[id=divDelete]").css("display", "none");
            $("[id$=txtBuildingCode]").prop("readonly", false);
            $("[id=buildingModal]").find("input[type=text],input[type=number], textarea").val("");
            $("[id=buildingModal]").find("input[type=checkbox]").prop("checked", true);
            $('[id$=cboCompanyStructure').combotree('setValue', null);
            //reload datagrid
            BindingDataToGrid([]);
        };

        function setFormData(data) {
            $("[id=divCreate]").css("display", "none");
            $("[id=divUpdate]").css("display", "");
            $("[id=divDelete]").css("display", "");
            //$("[id$=txtBuildingCode]").prop("readonly", false);
            $('[id$=txtBuildingKey]').val(data.BuildingKey);
            $('[id$=txtBuildingCode]').val(data.BuildingCode);
            $('[id$=txtBuildingName]').val(data.BuildingName);
            $('[id$=txtDescription]').val(data.Description);
            $('[id$=txtTaxNumber]').val(data.TaxNumber);
            $('[id$=txtCompanyName]').val(data.CompanyName);
            $('[id$=txtAddress]').val(data.Address);
            $("[id$=cbActive]").prop('checked', data.Active);
            $("[id$=cboCompanyStructure]").combotree({
                onLoadSuccess: function () {
                    $('[id$=cboCompanyStructure').combotree('setValue', data.CompanyStructureKey);
                }
            });
        };

        //Ajax call API
        function CallAjaxSave(mode, objData) {
            try {
                ajaxindicatorstart(VNMessageR.COMMON_00011);
                $.ajax({
                    type: mode === "Create" ? "POST" : "PUT",
                    url: "/Building/" + mode,
                    headers: { 'FunctionID': FunctionID },
                    dataType: "json",
                    contentType: "application/json;",
                    data: JSON.stringify(objData),
                    success: function (msg) {
                        ajaxindicatorstop();
                        if (msg.Success) {
                            switch (mode) {
                                case "Create":
                                    toastr.success(VNMessageR.COMMON_00002);
                                    $('#buildingModal').modal('hide');
                                    break;
                                case "Update":
                                    toastr.success(VNMessageR.COMMON_00003);
                                    $('#buildingModal').modal('hide');
                                    break;
                            };

                            setTimeout(function () {
                                initCombo();
                                //reload current page
                                $("#tblBuilding").DataTable().ajax.reload(null, false);
                            },
                                500);
                        } else {
                            ToastrErr(msg);
                        }
                    },
                    error: function (err) {
                        ToastrException(err);
                        ajaxindicatorstop();
                    }
                });
            } catch (err) {
                toastr.error(err);
                ajaxindicatorstop();
            }
        }

        function CallAjaxDelete(id) {
            try {
                ajaxindicatorstart(VNMessageR.COMMON_00011);
                $.ajax({
                    type: "DELETE",
                    url: "/Building/Delete/" + id,
                    headers: { 'FunctionID': FunctionID },
                    dataType: "json",
                    success: function (msg) {
                        ajaxindicatorstop();
                        if (msg.Success) {
                            toastr.success(VNMessageR.COMMON_00012);
                            $('#buildingModal').modal('hide');
                            setTimeout(function () {
                                initCombo();
                                //reload current page
                                $("#tblBuilding").DataTable().ajax.reload(null, false);
                            },
                                500);
                        } else {
                            ToastrErr(msg);
                        }
                    },
                    error: function (err) {
                        ToastrException(err);
                        ajaxindicatorstop();
                    }
                });
            } catch (err) {
                toastr.error(err);
                ajaxindicatorstop();
            }
        }

        function CallAjaxDeleteDetail(id) {
            try {
                ajaxindicatorstart(VNMessageR.COMMON_00011);
                $.ajax({
                    type: "DELETE",
                    url: "/Building/DeleteDetail/" + id,
                    headers: { 'FunctionID': FunctionID },
                    dataType: "json",
                    success: function (msg) {
                        ajaxindicatorstop();
                        if (msg.Success) {
                            toastr.success(VNMessageR.COMMON_00012);
                            $("[id=dgBuildingSection]").datagrid('cancelEdit', editIndex).datagrid('deleteRow', editIndex);
                            editIndex = undefined;
                        } else {
                            ToastrErr(msg);
                        }
                    },
                    error: function (err) {
                        ToastrException(err);
                        ajaxindicatorstop();
                    }
                });
            } catch (err) {
                toastr.error(err);
                ajaxindicatorstop();
            }
        }

        //open modal
        function openCreateNew() {
            resetFormData();
            $('#buildingModal').modal('show');
            $('#buildingModal').on('shown.bs.modal', function () {
                BindingDataToGrid([]);
            });
        }

        function openEdit(e, id) {
            resetFormData();
            onGetByID(id);
            $('#buildingModal').modal('show');
        }

    </script>
}