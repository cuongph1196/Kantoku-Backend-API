@using System.Globalization
@model QLKTX.Models.PageInfoViewModel;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Danh mục nhóm đối tác";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-3">
                            <div class="form-group">
                                <label>Tìm kiếm:</label>
                                <input type="text" id="txtSearch" class="form-control form-control-sm" autocomplete="off">
                            </div>
                        </div>
                    </div>
                </div>
                <!-- /.card-body -->
                <div class="card-footer clearfix text-center">
                    <button type="button" class="btn btn-sm btn-primary" onclick="onSearch()" @(Model.FUPermiss.FView ? "" : "disabled")><i class="fa fa-search"></i> Tìm kiếm</button>
                    <button type="button" class="btn btn-sm btn-success" onclick="openCreateNew(event)" @(Model.FUPermiss.FAdd ? "" : "disabled")><i class="fas fa-plus"></i> Thêm mới</button>
                    <button type="button" class="btn btn-sm btn-info" onclick="openUpdate(event)"><i class="fas fa-pen-square"></i> Cập nhật</button>
                    <button type="button" class="btn btn-sm btn-danger" onclick="onDelete(event)" @(Model.FUPermiss.FDel ? "" : "disabled")><i class="fas fa-trash-alt"></i> Xóa</button>
                </div>
            </div>
            <!-- /.card -->
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <div class="card card-info">
                <div class="card-header">
                    <h3 class="card-title">Nhóm đối tác</h3>
                </div>
                <!-- /.card-header -->
                <div class="card-body">
                    <table id="tblPartnerGroup" class="easyui-treegrid table-data" title="" style="height: 500px;"></table>
                </div>
                <!-- /.card-body -->
            </div>
            <!-- /.card -->
        </div>
    </div>
</div>

<div class="modal fade" id="partnerGroupModal">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-info">
                <h5 class="modal-title">Thêm/Cập nhật</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label for="inputName">Mã nhóm đối tác (*)</label>
                            <input type="text" id="txtPartnerGroupCode" class="form-control form-control-sm entry_required" autocomplete="off" />
                            <input type="hidden" id="txtPartnerGroupKey" class="form-control form-control-sm" autocomplete="off" readonly />
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label for="inputName">Tên nhóm đối tác (*)</label>
                            <input type="text" id="txtPartnerGroupName" class="form-control form-control-sm entry_required" autocomplete="off" />
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label for="inputName">Nhóm đối tác cha</label>
                            <div class="">
                                <input type="text" id="cboPartnerGroupParent" class="easyui-combotree" autocomplete="off" data-options="animate:true, prompt:''" />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            <label for="inputName">Diễn giải</label>
                            <input type="text" id="txtDescription" class="form-control form-control-sm" autocomplete="off" />
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="form-group form-check m-t35" style="padding-left: 1.5rem;">
                            <input type="checkbox" class="form-check-input" id="cbActive">
                            <label class="form-check-label" for="cbActive">Sử dụng</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer justify-content-between">
                <button type="button" class="btn btn-default" data-dismiss="modal">Đóng</button>
                <div id="divCreate" class="form-group">
                    <button type="button" id="btnCreate" class="btn btn-primary" onclick="onCreate(event)" @(Model.FUPermiss.FAdd ? "" : "disabled")>Lưu</button>
                </div>
                <div id="divUpdate" class="form-group" style="display:none;">
                    <button type="button" id="btnUpdate" class="btn btn-primary" onclick="onUpdate(event)" @(Model.FUPermiss.FEdit ? "" : "disabled")>Lưu</button>
                </div>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>
<!-- /.modal -->
@section scripts {
    <script type="text/javascript">
        var requiredList = document.getElementsByClassName("entry_required");
        var FunctionID = "@Model.FunctionID";
        var lstCompList = [];
        var compSearchModel = {
            SearchParams: null
        };
        var objCombo = {
            cboPartnerGroupSearchData: [],
            cboPartnerGroupData: []
        };

        $(document).ready(async function () {
            $.ajaxSettings.async = false;
            intitCombotreeDataPartnerGroup();
            onSearch();
            $.ajaxSettings.async = true;
        });

        function intitCombotreeDataPartnerGroup() {
            objCombo.cboPartnerGroupData = getDataComboTree(ProjectCF.configs.baseApi + "/Common/combotree/partner-group");
            $.when(objCombo.cboPartnerGroupData)
                .done(function (dataPartnerGroup) {

                    $("#cboPartnerGroupParent").combotree({
                        data: dataPartnerGroup,
                        panelHeight: 300,
                        icons: [
                            {
                                iconCls: "icon-clear",
                                handler: function (e) {
                                    $(e.data.target).combotree("clear");
                                }
                            }
                        ]
                    });

                })
                .fail(function (jqXHR, textStatus, errorThrown) {
                    // If fail
                    console.log(textStatus + ": " + errorThrown);
                });
        }

        function LoadDataTreePartnerGroup(data) {
            var dataConvert = [];
            $.each(data,
                function (i, item) {
                    dataConvert.push({
                        id: item.PartnerGroupKey,
                        code: item.PartnerGroupCode,
                        name: item.PartnerGroupName,
                        text: item.PartnerGroupCode + " - " + item.PartnerGroupName,
                        parentid: item.PartnerGroupParentKey,
                        notes: item.Description,
                        active: item.Active
                    });
                });

            objCombo.cboPartnerGroupSearchData = convertToTreeData(dataConvert);

            $("[id=tblPartnerGroup]").treegrid({
                lines: true,
                rownumbers: false,
                animate: false,
                collapsible: false,
                fitColumns: false,
                idField: "id",
                treeField: "name",
                data: objCombo.cboPartnerGroupSearchData,
                columns: [
                    [
                        {
                            title: 'Nhóm đối tác',
                            width: 400,
                            field: "name",
                            align: "left"
                        },
                        {
                            title: 'Chi tiết',
                            width: 300,
                            field: "text",
                            align: "left"
                        },
                        {
                            title: 'Mô tả',
                            width: 300,
                            field: "notes",
                            align: "left"
                        },
                        {
                            title: 'Trạng thái',
                            width: 100,
                            field: "active",
                            align: "left",
                            formatter: function (value, row) {
                                return value === true
                                    ? 'Hoạt động' : 'Không hoạt động';
                            }
                        }
                    ]
                ]
            });
        }

        function onSearch() {
            toastr.remove();
            try {
                var objSearch = {
                    SearchParams: $("[id=txtSearch]").val()
                };
                ajaxindicatorstart(VNMessageR.COMMON_00011);
                $.ajax({
                    type: "GET",
                    url: "/PartnerGroup/SearchAll",
                    headers: { 'FunctionID': FunctionID },
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    data: objSearch,
                    success: function (msg) {
                        ajaxindicatorstop();
                        if (msg.Success) {
                            LoadDataTreePartnerGroup(msg.Data.Items);
                        } else {
                            LoadDataTreePartnerGroup([]);
                        }
                    },
                    error: function (err) {
                        ToastrException(err);
                        ajaxindicatorstop();
                    }
                });
            } catch (err) {
                toastr.error(err);
                ajaxindicatorstop();
            }
        }

        function openUpdate(e) {
            e.preventDefault();
            resetFormData();
            GetPartnerGroupById();
            setTimeout(function () {
                $('#partnerGroupModal').modal('show');
            }, 100);
        }

        function GetPartnerGroupById() {
            toastr.remove();
            let node = $("[id=tblPartnerGroup]").treegrid("getSelected");
            if (node === undefined || node === null) {
                toastr.warning(VNMessageR.COMMON_00016);
                return false;
            }
            try {
                $.ajax({
                    type: "GET",
                    url: "/PartnerGroup/GetById?id=" + node.id,
                    headers: { 'FunctionID': FunctionID },
                    dataType: "json",
                    success: function (msg) {
                        ajaxindicatorstop();
                        if (msg.Success) {
                            setFormData(msg.Data);
                        } else {
                            toastr.error(VNMessageR.COMMON_00015);
                        }
                    },
                    error: function (err) {
                        ToastrException(err); ajaxindicatorstop();
                    }
                });
            } catch (err) {
                toastr.error(err);
                ajaxindicatorstop();
            }
        }


        function onCreate(e) {
            e.preventDefault();
            let isValidForm = ValidateControlForm(requiredList);
            if (!isValidForm) {
                toastr.warning(VNMessageR.COMMON_00001);
                return false;
            }

            $.messager.confirm(VNMessageR.COMMON_00010,
                VNMessageR.COMMON_00007,
                function (r) {
                    if (r) {
                        let objSave = {
                            PartnerGroupKey: $("[id=txtPartnerGroupKey]").val() || null,
                            PartnerGroupCode: $("[id=txtPartnerGroupCode]").val(),
                            PartnerGroupName: $("[id=txtPartnerGroupName]").val(),
                            PartnerGroupParentKey: $('[id$=cboPartnerGroupParent').combotree('getValue') || null,
                            Description: $("[id=txtDescription]").val(),
                            Active: $("[id=cbActive]").prop("checked")
                        };
                        CallAjaxSave("Create", objSave);
                    }
                });
            return false;
        }

        function onUpdate(e) {
            e.preventDefault();
            let isValidForm = ValidateControlForm(requiredList);
            if (!isValidForm) {
                toastr.warning(VNMessageR.COMMON_00001);
                return false;
            }

            $.messager.confirm(VNMessageR.COMMON_00010,
                VNMessageR.COMMON_00007,
                function (r) {
                    if (r) {
                        let objSave = {
                            PartnerGroupKey: $("[id=txtPartnerGroupKey]").val(),
                            PartnerGroupCode: $("[id=txtPartnerGroupCode]").val(),
                            PartnerGroupName: $("[id=txtPartnerGroupName]").val(),
                            PartnerGroupParentKey: $('[id$=cboPartnerGroupParent').combotree('getValue') || null,
                            Description: $("[id=txtDescription]").val(),
                            Active: $("[id=cbActive]").prop("checked")
                        };
                        CallAjaxSave("Update", objSave);
                    }
                });
            return false;
        }

        function resetFormData() {
            $("[id=divCreate]").css("display", "");
            $("[id=divUpdate]").css("display", "none");
            $("[id=txtPartnerGroupCode]").prop("readonly", false);
            $("[id=partnerGroupModal]").find("input[type=text],input[type=number], textarea").val("");
            $("[id=partnerGroupModal]").find("input[type=checkbox]").prop("checked",true);
            $('[id$=cboPartnerGroupParent').combotree('setValue', null);
        };

        function setFormData(data) {
            $("[id=divCreate]").css("display", "none");
            $("[id=divUpdate]").css("display", "");
            //$("[id=txtPartnerGroupCode]").prop("readonly", false);
            $('[id$=txtPartnerGroupKey]').val(data.PartnerGroupKey);
            $('[id$=txtPartnerGroupCode]').val(data.PartnerGroupCode);
            $('[id$=txtPartnerGroupName]').val(data.PartnerGroupName);
            $('[id$=txtDescription]').val(data.Description);
            $("[id$=cbActive]").prop('checked', data.Active);
            $("[id$=cboPartnerGroupParent]").combotree({
                onLoadSuccess: function () {
                    $('[id$=cboPartnerGroupParent').combotree('setValue', data.PartnerGroupParentKey);
                }
            });
        };

        function onDelete(e) {
            e.preventDefault();
            let node = $("[id=tblPartnerGroup]").treegrid("getSelected");
            if (node === undefined || node === null) {
                toastr.warning(VNMessageR.COMMON_00016);
                return false;
            }
            if (node.id) {
                $.messager.confirm(VNMessageR.COMMON_00010,
                    VNMessageR.COMMON_00014,
                    function (r) {
                        if (r) {
                            CallAjaxDelete(node.id);
                        }
                    });
                return false;
            } else {
                toastr.warning(VNMessageR.COMMON_00013);
            }
        }

        //Ajax call API
        function CallAjaxSave(mode, objData) {
            try {
                ajaxindicatorstart(VNMessageR.COMMON_00011);
                $.ajax({
                    type: mode === "Create" ? "POST" : "PUT",
                    url: "/PartnerGroup/" + mode,
                    headers: { 'FunctionID': FunctionID },
                    dataType: "json",
                    contentType: "application/json; charset=utf-8;",
                    data: JSON.stringify(objData),
                    success: function (msg) {
                        ajaxindicatorstop();
                        if (msg.Success) {
                            switch (mode) {
                                case "Create":
                                    toastr.success(VNMessageR.COMMON_00002);
                                    $('#partnerGroupModal').modal('hide');
                                    break;
                                case "Update":
                                    toastr.success(VNMessageR.COMMON_00003);
                                    $('#partnerGroupModal').modal('hide');
                                    break;
                            };

                            setTimeout(function () {
                                intitCombotreeDataPartnerGroup();
                                onSearch();
                            },
                                500);
                        } else {
                            ToastrErr(msg);
                        }
                    },
                    error: function (err) {
                        ToastrException(err);
                        ajaxindicatorstop();
                    }
                });
            } catch (err) {
                toastr.error(err);
                ajaxindicatorstop();
            }
        }

        function CallAjaxDelete(id) {
            try {
                ajaxindicatorstart(VNMessageR.COMMON_00011);
                $.ajax({
                    type: "DELETE",
                    url: "/PartnerGroup/Delete/" + id,
                    headers: { 'FunctionID': FunctionID },
                    dataType: "json",
                    success: function (msg) {
                        ajaxindicatorstop();
                        if (msg.Success) {
                            toastr.success(VNMessageR.COMMON_00012);
                            setTimeout(function () {
                                intitCombotreeDataPartnerGroup();
                                onSearch();
                            },
                                500);
                        } else {
                            ToastrErr(msg);
                        }
                    },
                    error: function (err) {
                        ToastrException(err);
                        ajaxindicatorstop();
                    }
                });
            } catch (err) {
                toastr.error(err);
                ajaxindicatorstop();
            }
        }

        //open modal
        function openCreateNew() {
            resetFormData();
            $('#partnerGroupModal').modal('show');
        }


    </script>
}